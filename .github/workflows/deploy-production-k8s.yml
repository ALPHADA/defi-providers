# Build for development PRs

name: Auto Deploy to K8s production.

on:
  push:
    branches: [ master ]

jobs:
  setup-build:
    name: Build and Deploy to K8s production
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true
      - name: Set current date and time as env variable
        id: datetime
        run: echo "::set-output name=datetime::$(date +'%Y-%m-%dT%H:%M:%S')"

      - name: Get current Unix Timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +%s)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_PROD }}
          ECR_REPOSITORY: defi-providers
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA} -t $ECR_REGISTRY/$ECR_REPOSITORY:prod .
          docker image push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Deploy image to k8s production
        run: |
          aws sts get-caller-identity
          aws eks --region eu-central-1 update-kubeconfig --name dappradar-production
          sed -i "/image\:/c\          image: ${{ secrets.ECR_PROD }}/defi-providers:${GITHUB_SHA}" kubernetes/prod/deployment.yaml
          aws secretsmanager get-secret-value --secret-id defi-providers-production-secrets --query SecretString --output text > secrets.env
          kubectl delete secret/defi-providers-production-secrets -n defi-providers
          kubectl create secret generic defi-providers-production-secrets --from-env-file=secrets.env -n defi-providers
          kubectl apply -f kubernetes/prod/deployment.yaml -n defi-providers
          kubectl apply -f kubernetes/prod/service.yaml -n defi-providers
        #        kubectl apply -f kubernetes/prod/hpa.yaml
        #        kubectl apply -f kubernetes/prod/ingress-alb-lookup.yaml
        env: # Or as an environment variable
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
